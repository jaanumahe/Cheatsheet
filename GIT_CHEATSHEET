# DELETE A BRANCH FROM COMMANDLINE : 

git push origin --delete BRANCHNAME

# CREATE EMPTY BRANCH :

git checkout --orphan BRANCHNAME

# EMPTY ALL FILES IN A BRANCH :

rm -rf * 
git status
git add . 
git commit -m "Message"
git push -u origin branchname

Goto Terminal(For Mac)/Command Prompt(For Windows)

Navigate to /Users/userDirectory
1. Create .ssh directory (mkdir .ssh)
2. Run this command to generate ssh keys from the .ssh directory 
cd .ssh
ssh-keygen -t rsa -C “<YOUR NAME For Identification – This will appear at the end of the SSH Key>”
3. It might ask to enter the name of the file (default will be id_rsa), just press enter to proceed with the defaults. It will create two keys, private(id_rsa) and public(id_rsa.pub)
4. Copy the public key (cat id_rsa.pub) 
5. Goto GitHub->Login->Settings->SSH Keys->Add SSH Key -> Name it and Save your SSH.
6. You should receive an email once its added successfully.
7. Try to clone any repository to verify.

General GIT Commands : 

Cloning GIT Repository : 
 git clone <SSH Clone URL of the project> 

This will clone the default branch set.

TO clone specific branch :
git clone –b <branchName> <SSH Clone URL of the project>  


To check status of your local repository : (uncommitted changes)
git status

To see which branch you are in:
git branch

To add all your uncommitted files/changes:
git add .

To add specific uncommitted files:
git add <fileName1> <fileName2>


To commit added files:
git commit –m “Commit Message" 


To checkin the changes into GIT:
git push origin <branchName>

Default : git push origin master
If you have just master branch, just git push should suffice. 

To add remote upstream or origin
git remote add upstream <repo.git>
git remote add origin <repo.git>

To checkout from GIT (Before pushing the code into GIT repo, its a standard practice to always run this command first, following by commit and push): 
git pull origin <branchName>

Default : git pull origin master
If you have just master branch, just git pull should suffice. 

To switch between branches : 
git checkout <branchName>

To Fork repository : (You can fork any GIT repo for your own purpose, which will create cloned copy under your username)
Goto any repo in GIT and click “FORK"
FYI – it is possible to merge back the forked repo with our changes to original repo.

#Setup GIT Username and Password
git config --global user.name "Billy Everyteen”
git config --global user.email "me@here.com”

##change upstream : 
git remote set-url upstream git://example.com/NewOriginal.git

##change origin : 
git remote set-url origin git://example.com/NewOriginal.git



## Tags
Tags are used for creating stable releases. To create a tag for using with the Git Drupal Repository, first, ensure that you're following the tag naming convention if you're using this tag for making a release. From inside the directory of the project, an example is:

 git tag 7.x-1.0
Once the tag is created, you need to push the tag up to the master repository. By itself, push doesn't send the tags up, you also need to tell it to include the tags in the push by appending the --tags flag:

git push --tags
If you don't want to push all your tags, you can also be specific:
Example:

git push origin tag 7.x-1.0
To check and confirm remote tags, the command is
git tag -l

### How to merge the changes from the main repo, when you have changes in forked repository : 
1) Add upstream (main repo) by using the following command : 
  git remote add upstream <gitLink>
2) Check if the upstream is been added by using this command : 
git remote -v
It should give the origin as your forked repo url, and upstream as your main repo.
3) Pull from upstream with branch name using this command : 
git pull upstream master
4) Add the files
git add <fileName>
5) Commit the changes
git commit -m "Commit Message"
6) Push the changes to Forked repo, which is origin. 
git push branchName origin

To look up the git configuration : 
git config --list

To look up global configuration : 
git config --global --list



